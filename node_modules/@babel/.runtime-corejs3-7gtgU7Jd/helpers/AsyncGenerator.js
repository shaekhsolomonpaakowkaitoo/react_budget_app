var _Promise = require("@babel/runtime-corejs3/core-js/promise");

var _Symbol = require("@babel/runtime-corejs3/core-js/symbol");

var _Symbol$asyncIterator = require("@babel/runtime-corejs3/core-js/symbol/async-iterator");

var OverloadYield = require("./OverloadYield.js");

function AsyncGenerator(gen) {
  var front, back;

  function resume(key, arg) {
    try {
      var result = gen[key](arg),
          value = result.value,
          overloaded = value instanceof OverloadYield;

      _Promise.resolve(overloaded ? value.v : value).then(function (arg) {
        if (overloaded) {
          var nextKey = "return" === key ? "return" : "next";
          if (!value.k || arg.done) return resume(nextKey, arg);
          arg = gen[nextKey](arg).value;
        }

        settle(result.done ? "return" : "normal", arg);
      }, function (err) {
        resume("throw", err);
      });
    } catch (err) {
      settle("throw", err);
    }
  }

  function settle(type, value) {
    switch (type) {
      case "return":
        